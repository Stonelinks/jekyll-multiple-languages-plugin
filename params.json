{"name":"Jekyll Multiple Languages","tagline":"Support multiple languages in your Jekyll site","body":"# Multiple Languages in Jekyll\r\n***\r\nJekyll Multiple Languages is an internationalization plugin for [Jekyll](https://github.com/mojombo/jekyll). It compiles your Jekyll site for one or more languages with a similar approach as Rails does. The different sites will be stored in sub folders with the same name as the language it contains.\r\n\r\nThe plugin is developed at [Screen Interaction](http://www.screeninteraction.com).\r\n\r\n##Installation\r\nCopy or link the file `multiple-languages-plugin.rb` into your `_plugins` folder\r\nfor your Jekyll project.\r\n\r\nIf your Jekyll project is in a git repository, you can easily\r\nmanage your plugins by utilizing git submodules.\r\n\r\nTo install this plugin as a git submodule:\r\n\r\n    git submodule add git://github.com/screeninteraction/jekyll-multiple-languages-plugin.git _plugins/multiple-languages\r\n\r\nTo update:\r\n\r\n    cd _plugins/multiple-languages\r\n    git pull origin master\r\n    \r\n###Features\r\n* Supports multiple languages with the same code base.\r\n* Supports all template languages that your Liquid pipeline supports.\r\n* Uses [Liquid tags](https://github.com/Shopify/liquid) in your HTML for including translated strings.\r\n* Compiles the site multiple times for all supported languages into separate subfolders.\r\n* The plugin even works with the -watch flag turned on and will rebuild all languages automatically.\r\n\r\n##Usage\r\n###Configuration\r\nAdd the i18n configuration to your _config.yml:\r\n\r\n```yaml\t\r\nlanguages: [\"sv\", \"en\", \"de\", \"fr\"]\r\n```\r\n\r\nThe first language in the array will be the default language, English, German and French will be added in to separate subfolders.\r\n\r\n###i18n\r\nCreate this folder structure in your Jekyll project as an example:\r\n\r\n    - /_i18/sv.yml\r\n    - /_i18/en.yml\r\n    - /_i18/de.yml\r\n    - /_i18/fr.yml\r\n    - /_i18/sv/pagename/blockname.md\r\n    - /_i18/en/pagename/blockname.md\r\n    - /_i18/de/pagename/blockname.md\r\n    - /_i18/fr/pagename/blockname.md\r\n\r\nTo add a string to your site use one of these\r\n\r\n```liquid\t\r\n{% t key ‰}\r\nor \r\n{% translate key ‰}\r\n```\r\n\t\r\nLiquid tags. This will pick the correct string from the `language.yml` file during compilation.\r\n\r\nThe language.yml files are written in YAML syntax which caters for a simple grouping of strings.\r\n\r\n```yaml\r\nglobal:\r\n\tswedish: Svenska\r\n\tenglish: English\r\npages:\r\n\thome: Home\r\n\twork: Work\r\n```\r\n\t\r\n  To access the english key, use this tag:\r\n\r\n```liquid  \t\r\n{% t global.english ‰} \r\nor \r\n{% translate global.english ‰}\r\n```\r\n  \t\r\nThe plugin also supports using different markdown files for different languages using the \r\n\r\n```liquid\t\r\n{% tf pagename/blockname.md ‰} \r\nor \r\n{% translate_file pagename/blockname.md ‰}\r\n```\r\n\r\nThis plugin have exactly the same support and syntax as the built in\r\n\r\n```liquid\t\r\n{% include file ‰}\r\n```\r\n\r\ntag, so plugins that extends its functionality should be picked up by this plugin as well.\r\n  \r\n###i18n in templates\r\nSometimes it is convenient to add keys even in template files. This works in the exact same way as in ordinary files, however sometimes it can be useful to include different string in different pages even if they use the same template.\r\n\r\nA perfect example is this:\r\n\r\n```html\r\n<html>\r\n\t<head>\r\n\t\t<title>{% t page.title %}</title>\r\n\t</head>\r\n</html>\r\n```\r\n\t\r\nSo how can I add different translated titles to all pages? Don't worry, it's easy. The Multiple Languages plugin supports Liguid variables as well as strings so define a page variable in your page definition\r\n\r\n```yaml\r\n--- \r\nlayout: default\r\ntitle: titles.home\r\n--- \r\n```\t\r\n\t\r\nand `<title>{% t page.title %}</title>` will pick up the `titles.home` key from `language.yml`\r\n\r\n```yaml\t\r\ntitles:\r\n\thome: \"Home\"\r\n```\r\n\t\t\r\n##Linking between languages\r\nThis plugin gives you the variables\r\n\t\r\n```liquid\r\n{{ page.lang }}\r\n\t\r\nand\r\n\t\r\n{{ site.baseurl_root }}\r\n```\r\n\t\r\nto play with in your template files.\r\n\r\nThis allows you to create solutions like this:\r\n\r\n```liquid\r\n{% if site.lang == \"sv\" %}\r\n\t{% capture link1 %}{{ site.baseurl_root }}en{{ page.url}}{% endcapture %}\r\n\t<a href=\"{{ link1 }}\" >{% t global.english %}</a>\r\n{% else if site.lang == \"en\" %}\r\n\t{% capture link2 %}{{ site.baseurl_root }}{{ page.url | remove_first: '/'  }}{% endcapture %}\r\n\t<a href=\"{{ link2 }}\" >{% t global.swedish %}</a>\r\n{% endif %}\r\n```\r\n\t\r\nThis code will add an `\"English\"` link in the Swedish pages and the other way around in the English pages.\r\n","google":"UA-9653495-14","note":"Don't delete this file! It's used internally to help with page regeneration."}